name: Microsoft Azure CLI kubectl plugin CI
env:
  GO_VERSION: 1.17 # TODO: Update
  AZURE_PREFIX: blanquicet-kubectl-az-ci
concurrency:
  # Only one workflow can run at a time unless
  # we create a new AKS cluster per github_ref (branch)
  group: kubectl-az-ci

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    name: Build kubectl-az
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ linux, darwin, windows ]
        arch: [ amd64, arm64 ]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: Cache Go
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build and generate tarball
        run: |
          target=kubectl-az-${{ matrix.os }}-${{ matrix.arch }}

          make $target

          binary_name=kubectl-az
          if [ ${{ matrix.os }} = "windows" ]; then
            binary_name=kubectl-az.exe
          fi

          # Prepare binary as artifact, it will be used by other jobs
          mv $target $binary_name
          tar --sort=name --owner=root:0 --group=root:0 \
            -czf ${target}.tar.gz \
            $binary_name LICENSE
      - name: Add kubectl-az-${{ matrix.os }}-${{ matrix.arch }}.tar.gz as artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubectl-az-${{ matrix.os }}-${{ matrix.arch }}
          path: kubectl-az-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: Check out code
        uses: actions/checkout@v3
      - name: Cache Go
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run tests
        run: make unit-test

  create-aks-cluster:
    name: Create AKS cluster
    needs: [ build, unit-tests ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64 ]
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create AKS cluster ${{ env.AZURE_PREFIX }}-${{ matrix.arch }}-cluster
        shell: bash
        run: |
          az aks create \
            --resource-group ${{ env.AZURE_PREFIX }}-rg \
            --name ${{ env.AZURE_PREFIX }}-${{ matrix.arch }}-cluster \
            --node-count 1 \
            --generate-ssh-keys

  delete-aks-cluster:
    name: Delete AKS cluster
    if: always()
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64 ]
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Delete AKS cluster ${{ env.AZURE_PREFIX }}-${{ matrix.arch }}-cluster
        shell: bash
        run: |
          az aks delete \
            --resource-group ${{ env.AZURE_PREFIX }}-rg \
            --name ${{ env.AZURE_PREFIX }}-${{ matrix.arch }}-cluster \
            --yes

  integration-tests:
    name: Run integration tests
    needs: [ build, unit-tests , create-aks-cluster ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # 'run-command' is not supported in parallel for a given node
      # (don't want to create a new cluster for each OS)
      max-parallel: 1
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        arch: [ amd64 ] # TODO: Support ARM
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set environment variables
        shell: bash
        run: |
          case ${{ matrix.os }} in
            ubuntu-latest)
              echo "os=linux" >> $GITHUB_ENV
              ;;
            macOS-latest)
              echo "os=darwin" >> $GITHUB_ENV
              ;;
            windows-latest)
              echo "os=windows" >> $GITHUB_ENV
              ;;
            *)
              echo "Not supported OS: ${{ matrix.os }}"
              exit 1
              ;;
          esac
      - name: Get kubectl-az from artifact
        uses: actions/download-artifact@v3
        with:
          name: kubectl-az-${{ env.os }}-${{ matrix.arch }}
      - name: Prepare kubectl-az binary
        shell: bash
        run: |
          tar zxvf kubectl-az-${{ env.os }}-${{ matrix.arch }}.tar.gz
          chmod +x kubectl-az
          ls -la
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS cluster context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ env.AZURE_PREFIX }}-${{ matrix.arch }}-cluster
          resource-group: ${{ env.AZURE_PREFIX }}-rg
          admin: false
      - if: matrix.os != 'ubuntu-latest'
        # kubectl is already installed in Linux runners
        uses: azure/setup-kubectl@v3
      - name: Run integration tests
        shell: bash
        run: |
          make integration-test -o kubectl-az

  release:
    name: Release
    needs: [ integration-tests ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Get all artifacts.
      uses: actions/download-artifact@v3
    - name: Rename all artifacts to *-${{ github.ref_name }}.tar.gz
      shell: bash
      run: |
        for i in kubectl-az-*-*-tar-gz/kubectl-az-*-*.tar.gz; do
          mv $i $(dirname $i)/$(basename $i .tar.gz)-${{ github.ref_name }}.tar.gz
        done
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Release ${{ github.ref }}
    - name: Upload kubectl-az binary
      uses: csexton/release-asset-action@v2
      with:
        pattern: "kubectl-az-*-*-tar-gz/kubectl-az-*-*.tar.gz"
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ steps.create_release.outputs.upload_url }}
    - name: Update new version in krew-index
      if: github.repository == 'azure/kubectl-az'
      uses: rajatjindal/krew-release-bot@v0.0.43
      with:
        workdir: /home/runner/work/kubectl-az/kubectl-az
        krew_template_file: .krew.yaml
